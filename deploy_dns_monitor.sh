#!/bin/bash

# Debian/Ubuntu DNS 服务监控页面一键部署与回滚脚本
# 作者：ChatGPT
# 版本：3.0 (最终版 - 修复所有已知语法错误，集成最终UI样式)
# 功能：部署一个 Flask 应用，通过网页监控 Unbound 和 Redis 状态。
#      提供回滚功能，移除本脚本部署的所有文件和配置。
#      提供一键诊断和尝试修复常见部署问题（包括 Redis）。
# 注意：本脚本会修改 /etc/sudoers.d/ 文件，请谨慎使用。
#      请确保 Unbound 和 Redis 已正确安装和配置。

# --- 定义颜色 ---
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# --- 辅助日志函数 ---
log_info() {
    echo -e "${GREEN}[信息]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[警告]${NC} $1"
}

log_error() {
    echo -e "${RED}[错误]${NC} $1"
}

log_blue() {
    echo -e "${BLUE}$1${NC}"
}

log_green() {
    echo -e "${GREEN}$1${NC}"
}

# --- 全局变量 ---
FLASK_APP_NAME="dns_monitor"
PROJECT_DIR="/opt/$FLASK_APP_NAME"
FLASK_PORT=5000
WEB_USER="www-data" # Flask 应用运行的用户
SUDOERS_DIR="/etc/sudoers.d" # sudoers 配置目录
SUDOERS_FILE="$SUDOERS_DIR/99-dns_monitor" # sudoers 配置文件路径
SYSTEMD_SERVICE_FILE="/etc/systemd/system/$FLASK_APP_NAME.service"
VENV_DIR="$PROJECT_DIR/venv" # 虚拟环境目录

UNBOUND_CONTROL_PATH=$(which unbound-control)
REDIS_CLI_PATH=$(which redis-cli)
REDIS_SOCKET_PATH="/run/redis/redis.sock" # Redis Unix Socket 路径，通常固定

# --- 辅助命令执行函数 ---
# 脚本本身以root运行，所以内部命令不需要再次使用sudo
run_command() {
    local cmd_list=("$@")
    "${cmd_list[@]}"
    return $?
}

# --- 清理/回滚函数 ---
cleanup_existing_deployment() {
    log_warn "正在执行回滚/清理操作..."

    if systemctl is-active --quiet "$FLASK_APP_NAME"; then
        log_info "停止并禁用 Systemd 服务: $FLASK_APP_NAME..."
        run_command systemctl stop "$FLASK_APP_NAME"
        run_command systemctl disable "$FLASK_APP_NAME"
        log_info "Systemd 服务已停止并禁用。"
    fi
    
    if [ -f "$SYSTEMD_SERVICE_FILE" ]; then
        log_info "移除 Systemd 服务文件: $SYSTEMD_SERVICE_FILE..."
        run_command rm "$SYSTEMD_SERVICE_FILE"
        run_command systemctl daemon-reload
        log_info "Systemd 服务文件已移除。"
    fi

    if [ -f "$SUDOERS_FILE" ]; then
        log_info "移除 sudoers 配置: $SUDOERS_FILE..."
        run_command rm "$SUDOERS_FILE"
        log_info "Sudoers 配置已移除。"
    fi

    if [ -d "$PROJECT_DIR" ]; then
        log_info "移除项目目录: $PROJECT_DIR (包含虚拟环境)..."
        run_command rm -rf "$PROJECT_DIR"
        log_info "项目目录已移除。"
    fi

    log_info "回滚/清理操作完成。"
}

# --- 部署函数 ---
deploy_monitor() {
    echo ""
    log_blue "--- 正在启动部署流程 ---"

    if [ -z "$UNBOUND_CONTROL_PATH" ]; then
        log_error "未找到 unbound-control 命令。请确保 Unbound 已安装。"
        return 1
    fi
    if [ -z "$REDIS_CLI_PATH" ]; then
        log_error "未找到 redis-cli 命令。请确保 Redis 已安装。"
        return 1
    fi

    log_info "Unbound Control Path: $UNBOUND_CONTROL_PATH"
    log_info "Redis CLI Path: $REDIS_CLI_PATH"
    log_info "Redis Socket Path: $REDIS_SOCKET_PATH"


    log_blue "[步骤 1/8] 安装 Python3 和 venv 模块..."
    run_command apt update -qq
    if [ $? -ne 0 ]; then
        log_error "apt update 失败。请检查网络连接或手动运行 'apt update'。"
        return 1
    fi
    run_command apt install -y python3 python3-pip python3-venv
    if [ $? -ne 0 ]; then
        log_error "无法安装 Python3 或 python3-venv。请手动检查并安装。"
        return 1
    fi
    log_info "Python3 和 venv 模块已安装。"

    log_blue "[步骤 2/8] 配置 sudoers 权限 (允许 $WEB_USER 执行命令)..."
    if ! id "$WEB_USER" &>/dev/null; then
        log_error "Web 用户 '$WEB_USER' 不存在。请手动创建或更改脚本中的 WEB_USER 变量。"
        return 1
    fi

    run_command mkdir -p "$SUDOERS_DIR"
    if [ $? -ne 0 ]; then
        log_error "无法创建 sudoers 配置目录: $SUDOERS_DIR。请检查权限。"
        return 1
    fi

    cat <<EOF > "$SUDOERS_FILE"
# Generated by dns_monitor deployment script
# Allow $WEB_USER to run unbound-control stats_noreset without password
$WEB_USER ALL=(root) NOPASSWD: $UNBOUND_CONTROL_PATH stats_noreset

# Allow $WEB_USER to run redis-cli info without password
$WEB_USER ALL=(root) NOPASSWD: $REDIS_CLI_PATH -s $REDIS_SOCKET_PATH info
EOF

    if [ $? -eq 0 ]; then
        run_command chmod 0440 "$SUDOERS_FILE"
        log_info "Sudoers 配置已写入 $SUDOERS_FILE。"
    else
        log_error "无法写入 Sudoers 配置文件。请检查权限。"
        return 1
    fi

    log_blue "[步骤 3/8] 将 $WEB_USER 用户添加到 redis 组..."
    if getent group redis &>/dev/null; then
        run_command usermod -aG redis "$WEB_USER"
        log_info "$WEB_USER 用户已添加到 redis 组。"
    else
        log_warn "组 'redis' 不存在。跳过将 $WEB_USER 添加到 'redis' 组。请确认 Redis 已正确安装并创建了该组。"
    fi


    log_blue "[步骤 4/8] 创建项目目录 $PROJECT_DIR 并创建 Python 虚拟环境..."
    run_command mkdir -p "$PROJECT_DIR/templates" "$PROJECT_DIR/static" # 创建static目录
    
    run_command python3 -m venv "$VENV_DIR"
    if [ $? -ne 0 ]; then
        log_error "无法创建 Python 虚拟环境。请检查 'python3-venv' 是否已安装。"
        return 1
    fi
    log_info "Python 虚拟环境已创建在 $VENV_DIR。"

    run_command chown -R "$WEB_USER:$WEB_USER" "$PROJECT_DIR"
    if [ $? -ne 0 ]; then
        log_error "无法设置项目目录和虚拟环境权限。"
        return 1
    fi
    log_info "项目目录权限已设置。"

    log_blue "[步骤 5/8] 在虚拟环境中安装 Flask 和 Gunicorn..."
    run_command "$VENV_DIR/bin/pip" install Flask gunicorn
    if [ $? -ne 0 ]; then
        log_error "无法在虚拟环境中安装 Flask 或 Gunicorn。请检查错误信息。"
        return 1
    fi
    log_info "Flask 和 Gunicorn 已安装到虚拟环境。"

    log_blue "[步骤 6/8] 创建 Flask 后端应用 (app.py)..."
    cat <<EOF > "$PROJECT_DIR/app.py"
# app.py
import sys
from flask import Flask, render_template, jsonify
import subprocess
import re
import datetime
import os

app = Flask(__name__)

# --- Configuration ---
# Paths are directly embedded from Bash script's discovered paths at deployment time
UNBOUND_CONTROL_PATH = "$UNBOUND_CONTROL_PATH"
REDIS_CLI_PATH = "$REDIS_CLI_PATH"
REDIS_SOCKET_PATH = "$REDIS_SOCKET_PATH"

def run_command_sudo(cmd_list):
    try:
        # Increased timeout to 15s for robustness against slow service responses
        process = subprocess.Popen(['sudo'] + cmd_list, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, encoding='utf-8')
        stdout, stderr = process.communicate(timeout=15)
        returncode = process.returncode

        if returncode != 0:
            print(f"DEBUG: Command failed: {' '.join(cmd_list)}", file=sys.stderr)
            print(f"DEBUG: Stderr: {stderr.strip()}", file=sys.stderr)
            return None, f"Command '{' '.join(cmd_list)}' failed with exit code {returncode}. Stderr: {stderr.strip()}"
        return stdout, None
    except FileNotFoundError:
        print(f"DEBUG: FileNotFoundError for command: {cmd_list[0]}", file=sys.stderr)
        return None, f"Error: Command '{cmd_list[0]}' or 'sudo' not found. Check PATH."
    except subprocess.TimeoutExpired:
        process.kill() # Terminate the process if it timed out
        stdout, stderr = process.communicate() # Collect any output after kill
        print(f"DEBUG: Command timed out: {' '.join(cmd_list)}", file=sys.stderr)
        print(f"DEBUG: Stderr: {stderr.strip()}", file=sys.stderr)
        return None, f"Error: Command '{' '.join(cmd_list)}' timed out after 15s. Stderr: {stderr.strip()}"
    except Exception as e:
        print(f"DEBUG: Unexpected error in run_command_sudo: {str(e)}", file=sys.stderr)
        return None, f"An unexpected error occurred during command execution: {str(e)}"

def parse_unbound_stats(raw_output):
    stats = {
        "status": "N/A",
        "uptime": "N/A",
        "total_queries": 0,
        "cache_hits": 0,
        "cache_misses": 0,
        "prefetch_count": 0,
        "expired_entries": 0,
        "recursive_replies": 0,
        "avg_recursion_time_s": 0.0,
        "median_recursion_time_s": 0.0,
        "cache_hit_percentage": "0.00%"
    }
    if not raw_output:
        return {"error": "Failed to get Unbound stats: Empty output."}

    parsed_values = {}
    for line in raw_output.splitlines():
        if '=' in line:
            try:
                key_raw, value_raw = line.split('=', 1)
                key = key_raw.strip().replace('.', '_').lower() # total.num.queries -> total_num_queries
                parsed_values[key] = value_raw.strip()
            except ValueError:
                pass # Skip lines that don't correctly split on '='

    time_up_seconds = float(parsed_values.get('time_up', 0))
    if time_up_seconds > 0:
        # Format uptime as H:MM:SS
        hours, remainder = divmod(int(time_up_seconds), 3600)
        minutes, seconds = divmod(remainder, 60)
        stats['uptime'] = f"{hours:d}:{minutes:02d}:{seconds:02d}"
    else:
        stats['uptime'] = "0:00:00"

    # Use .get() with default 0 to prevent KeyError if a stat is missing
    stats['total_queries'] = int(parsed_values.get('total_num_queries', 0))
    stats['cache_hits'] = int(parsed_values.get('total_num_cachehits', 0))
    stats['cache_misses'] = int(parsed_values.get('total_num_cachemiss', 0))
    stats['prefetch_count'] = int(parsed_values.get('total_num_prefetch', 0))
    stats['expired_entries'] = int(parsed_values.get('total_num_expired', 0))
    stats['recursive_replies'] = int(parsed_values.get('total_num_recursivereplies', 0))
    stats['avg_recursion_time_s'] = float(parsed_values.get('total_recursion_time_avg', 0.0))
    stats['median_recursion_time_s'] = float(parsed_values.get('total_recursion_time_median', 0.0))

    if stats['total_queries'] > 0:
        stats['status'] = "运行中"
    else:
        stats['status'] = "等待查询"

    if stats['total_queries'] > 0:
        stats['cache_hit_percentage'] = f"{ (stats['cache_hits'] / stats['total_queries'] * 100):.2f}%"
    else:
        stats['cache_hit_percentage'] = "0.00%"

    return stats

def parse_redis_stats(raw_output):
    stats = {
        "status": "N/A",
        "uptime": "N/A",
        "database_size_records": 0,
        "keyspace_hits": 0,
        "keyspace_misses": 0,
        "keyspace_hit_percentage": "0.00%",
        "used_memory": "0M",
        "resident_memory": "0M",
        "used_memory_peak": "0M"
    }
    if not raw_output:
        return {"error": "Failed to get Redis stats: Empty output."}

    parsed_values = {}
    for line in raw_output.splitlines():
        if ':' in line and not line.startswith('#'):
            try:
                key, value = line.split(':', 1)
                parsed_values[key.strip().replace(' ', '_').lower()] = value.strip()
            except ValueError:
                pass

    if parsed_values.get('redis_mode') == 'standalone':
        stats['status'] = "运行中"
    elif parsed_values.get('redis_mode'):
        stats['status'] = f"运行中 ({parsed_values['redis_mode']})"
    else:
        stats['status'] = "未运行"

    # Uptime
    uptime_seconds = int(parsed_values.get('uptime_in_seconds', 0))
    if uptime_seconds > 0:
        hours, remainder = divmod(uptime_seconds, 3600)
        minutes, seconds = divmod(remainder, 60)
        stats['uptime'] = f"{hours:d}:{minutes:02d}:{seconds:02d}"
    else:
        stats['uptime'] = "0:00:00"

    # Use .get() with default 0 to prevent KeyError
    stats['keyspace_hits'] = int(parsed_values.get('keyspace_hits', 0))
    stats['keyspace_misses'] = int(parsed_values.get('keyspace_misses', 0))
    
    stats['used_memory'] = parsed_values.get('used_memory_human', '0M')
    stats['resident_memory'] = parsed_values.get('used_memory_rss_human', '0M')
    stats['used_memory_peak'] = parsed_values.get('used_memory_peak_human', '0M')

    db0_info = parsed_values.get('db0', '')
    db_match = re.search(r"keys=(\d+)", db0_info)
    if db_match:
        stats['database_size_records'] = int(db_match.group(1))

    total_keyspace_queries = stats['keyspace_hits'] + stats['keyspace_misses']
    if total_keyspace_queries > 0:
        stats['keyspace_hit_percentage'] = f"{ (stats['keyspace_hits'] / total_keyspace_queries * 100):.2f}%"
    else:
        stats['keyspace_hit_percentage'] = "0.00%"

    return stats

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/api/status')
def get_status():
    unbound_stdout, unbound_error = run_command_sudo([UNBOUND_CONTROL_PATH, "stats_noreset"])
    redis_stdout, redis_error = run_command_sudo([REDIS_CLI_PATH, "-s", REDIS_SOCKET_PATH, "info"]) 

    if unbound_error:
        unbound_data = {"error": unbound_error}
    else:
        unbound_data = parse_unbound_stats(raw_output=unbound_stdout)

    if redis_error:
        redis_data = {"error": redis_error}
    else:
        redis_data = parse_redis_stats(raw_output=redis_stdout)

    return jsonify({
        "unbound": unbound_data,
        "redis": redis_data
    })

if __name__ == '__main__':
    port = int(os.environ.get('FLASK_PORT', 5000)) 
    app.run(host='0.0.0.0', port=port, debug=False)
EOF

    if [ $? -ne 0 ]; then
        log_error "无法创建 app.py 文件。"
        return 1
    fi
    run_command chown "$WEB_USER:$WEB_USER" "$PROJECT_DIR/app.py"
    log_info "Flask 应用 (app.py) 已创建。"


    log_blue "[步骤 7/8] 创建网站图标 (favicon.png)..." # 新增图标步骤
    # 32x32px 蓝色圆点 (PNG) 的 Base64 编码数据
    local FAVICON_BASE64="iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABz51DBAAAAVklEQVR4Xu2WIREAMAgD+5+sO/D9S8Y1Y8UfH6bYk9XbK4iICAgICAgICAgICAgICAgICAgICAj4P+6qEBAQ+O/gJ42Y+G8DAAAA//8DAQCAhM3p5B9pAAAAAElFTkSuQmCC"
    
    echo "$FAVICON_BASE64" | base64 -d > "$PROJECT_DIR/static/favicon.png"
    if [ $? -eq 0 ]; then
        run_command chown "$WEB_USER:$WEB_USER" "$PROJECT_DIR/static/favicon.png"
        log_info "网站图标 (favicon.png) 已创建并设置权限。"
    else
        log_error "无法创建网站图标文件。请检查权限。"
        return 1
    fi


    log_blue "[步骤 8/8] 创建 HTML 前端页面 (index.html)..." # 更新步骤号
    # 使用单引号 'EOF' 来防止 bash 变量扩展，确保 HTML/CSS/JS 内容原样写入
    cat <<'EOF' > "$PROJECT_DIR/templates/index.html"
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DNS 服务监控</title>
    
    <!-- Favicon / 网站图标 -->
    <link rel="icon" type="image/png" sizes="32x32" href="/static/favicon.png">
    <link rel="apple-touch-icon" sizes="180x180" href="/static/favicon.png"> <!-- iOS主屏幕图标也用这个 -->

    <!-- Include Chart.js from CDN -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.3/dist/chart.umd.min.js"></script>
    <style>
        /* CSS Variables for theming */
        :root {
            --bg-color: #fcfcfc;             /* Light background, very clean */
            --text-color: #2c2c2e;           /* Dark text for high contrast */
            --card-bg: #ffffff;             /* Card background */
            --card-shadow: 0 5px 15px rgba(0, 0, 0, 0.06); /* Soft, balanced shadow */
            --border-color: #e8e8e8;        /* Subtle border for cards */
            --accent-color: #007aff;        /* Apple blue */
            --error-color: #e74c3c;         /* Red for errors */
            --label-color: #6a6a6a;         /* Slightly softer label text */
            --value-color: #333333;         /* Default value text color */
            --toggle-bg: #e0e0e0;           /* Toggle background */
            --toggle-color: #555;           /* Toggle icon color */
            --toggle-hover: #d0d0d0;        /* Toggle hover background */
            --toggle-active: #c0c0c0;       /* Toggle active background */
            --toggle-shadow: 0 2px 4px rgba(0, 0, 0, 0.08); /* Balanced shadow for toggle button */

            /* Status Dot Colors */
            --status-green: #28a745;        /* Standard green */
            --status-red: #dc3545;          /* Standard red */

            /* Chart Colors (light mode) */
            --chart-grid-color: rgba(0, 0, 0, 0.1); /* Visible grid for light mode */
            --chart-tick-color: #6a6a6a;
            --chart-line-color: #007aff;
            --chart-point-color: #007aff;
            --chart-tooltip-bg: rgba(255, 255, 255, 0.9);
            --chart-tooltip-border: #e0e0e0;
            --chart-tooltip-text: #333;

            /* Gradient Colors (Light Mode) - Subtle, professional */
            --gradient-start: #007aff; 
            --gradient-mid: #005bb7;   /* Slightly darker blue for depth */
            --gradient-end: #007aff;   /* End with accent color for clean look */
            
            /* Border Radii */
            --radius-main: 0.8rem;    /* Main card/elements radius, slightly larger */
            --radius-bar: 0.15rem;    /* Gradient bar radius */
            --radius-control: 0.4rem; /* Form control corners */
        }

        .dark-mode {
            --bg-color: #1a1a1a;
            --text-color: #e6e6e6;
            --card-bg: #222222;
            --card-shadow: 0 6px 20px rgba(0, 0, 0, 0.4); /* Adjusted for dark mode contrast */
            --border-color: #383838;
            --accent-color: #007aff;
            --error-color: #e74c3c;
            --label-color: #aaaaaa;
            --value-color: #f4f4f4;
            --toggle-bg: #404040;
            --toggle-color: #ddd;
            --toggle-hover: #505050;
            --toggle-active: #606060;
            --toggle-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);

            --status-green: #28a745;
            --status-red: #dc3545;

            --chart-grid-color: rgba(255, 255, 255, 0.2); /* Brighter grid for dark mode */
            --chart-tick-color: #aaaaaa;
            --chart-line-color: #007aff;
            --chart-point-color: #007aff;
            --chart-tooltip-bg: rgba(34, 34, 34, 0.9);
            --chart-tooltip-border: #383838;
            --chart-tooltip-text: #f4f4f4;

            /* Gradient Colors (Dark Mode) - More subtle */
            --gradient-start: #007aff;
            --gradient-mid: #005bb7; 
            --gradient-end: #007aff;
        }

        /* Base styles */
        html {
            font-size: 16px; /* PC端基准字体大小 */
        }
        body {
            font-family: 'SF Pro Text', 'system-ui', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;
            margin: 0;
            padding: 1.5rem; /* PC端页面边距，约24px，提供更宽松的视觉 */
            background-color: var(--bg-color);
            color: var(--text-color);
            line-height: 1.5; /* 标准行高，提供舒适阅读 */
            transition: background-color 0.4s ease-in-out, color 0.4s ease-in-out;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            box-sizing: border-box;
        }

        .header {
            text-align: center;
            margin-bottom: 0;
            padding-bottom: 0;
            border-bottom: none;
            position: relative;
        }

        .header h1 {
            font-size: 2.2rem; /* PC端主标题字号，增大 */
            color: var(--accent-color);
            margin: 0 0 0.5rem 0; /* 主标题与渐变条的间距 */
            font-weight: 700;
            letter-spacing: -0.02em; 
        }
        /* Main Title Gradient Bar */
        .header-gradient-bar {
            width: 100%;
            max-width: 140px; /* PC端主标题渐变条宽度，适当增大 */
            height: 4px; /* 主标题渐变条高度 */
            border-radius: var(--radius-bar);
            background-image: linear-gradient(to right, var(--gradient-start), var(--gradient-mid), var(--gradient-end));
            margin: 0 auto 1.5rem auto; /* 居中显示，控制与container的间距 */
            transition: background-image 0.4s ease-in-out;
        }


        .container {
            display: flex;
            flex-wrap: wrap;
            gap: 1.25rem; /* 卡片间距，增大 */
            max-width: 1100px; /* PC端最大宽度，适当增大 */
            width: 100%;
            margin: 1.5rem auto; /* 调整外边距 */
            flex-grow: 1;
            justify-content: center;
        }

        .card {
            background-color: var(--card-bg);
            border-radius: var(--radius-main); 
            box-shadow: var(--card-shadow);
            padding: 1.5rem; /* 卡片内边距，约24px，更宽松 */
            flex: 1;
            min-width: 320px; /* PC端卡片最小宽度，确保内容不挤压 */
            max-width: calc(50% - 0.625rem); /* 适应新间距 */
            box-sizing: border-box;
            transition: background-color 0.4s ease-in-out, box-shadow 0.4s ease-in-out, transform 0.2s ease-out; 
            border: 1px solid var(--border-color);
        }

        .card:hover {
            transform: translateY(-0.25rem); /* 适度的悬停升起 */
            box-shadow: var(--card-shadow);
        }

        .chart-card {
            min-width: 680px; /* 图表卡片最小宽度，适应更大布局 */
            max-width: calc(100% - 0.625rem);
            flex: 2;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            align-items: stretch;
        }

        .chart-canvas-container {
            position: relative;
            height: 280px; /* PC端图表高度，增大 */
            flex-grow: 1;
            margin-bottom: 1rem; /* 图表与下方内容的间距 */
        }

        h2 {
            color: var(--text-color);
            border-bottom: none;
            padding-bottom: 0;
            margin-top: 0;
            margin-bottom: 0.4rem; /* 标题与渐变条间距 */
            font-size: 1.5rem; /* 卡片标题字号，增大 */
            font-weight: 600;
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 0.4rem; /* 标题内元素间距 */
        }
        h2 .title-text {
            flex-grow: 1;
            text-align: left;
        }
        /* Status dot for H2 - Chart card still uses this. */
        h2 .status-dot { 
            width: 0.5rem; /* 状态点大小 */
            height: 0.5rem;
            border-radius: 50%;
            transition: background-color 0.3s ease-in-out; /* No pulsing in CSS */
            flex-shrink: 0;
        }

        /* Card Title Gradient Bar */
        .card-title-gradient-bar {
            width: 100%;
            height: 3px; /* 卡片标题渐变条高度 */
            border-radius: var(--radius-bar);
            background-image: linear-gradient(to right, var(--gradient-start), var(--gradient-mid), var(--gradient-end));
            margin-bottom: 1rem; /* 渐变条下方与内容的间距，增大 */
            transition: background-image 0.4s ease-in-out;
        }

        /* --- 新增/修改的美化样式 --- */

        /* 1. 实现 "标签居左，数值居右" 并美化数据行 */
        p {
            margin: 0; /* 移除默认外边距 */
            padding: 0.6rem 0.25rem; /* 增加垂直内边距来控制间距，并增加少量水平内边距 */
            font-size: 1rem;
            display: flex;
            align-items: baseline;
            justify-content: space-between; /* 关键：将标签和值推向两端 */
            gap: 1rem; /* 标签和值之间的最小间距 */
            border-bottom: 1px solid var(--border-color); /* 添加分割线 */
            transition: border-color 0.4s ease-in-out;
        }

        /* 移除最后一个数据行的分割线 */
        .card p:last-of-type {
            border-bottom: none;
            padding-bottom: 0;
        }

        .label {
            font-weight: 500;
            color: var(--label-color);
            flex-shrink: 0;
            width: 10rem; /* 适当增大标签宽度以适应更长的文本 */
            text-align: left; /* 【核心修改】标签文本左对齐 */
        }

        .value-display {
            color: var(--value-color);
            font-weight: 600;
            flex-grow: 1; 
            text-align: right; /* 【核心修改】数值文本右对齐 */
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            /* 2. 为数值部分应用等宽字体，使其对齐更美观 */
            font-family: 'SF Mono', 'Menlo', 'Consolas', 'Liberation Mono', 'Courier New', monospace;
            font-size: 1.05em; /* 略微增大数值字体，使其更突出 */
        }

        /* --- 美化样式结束 --- */

        /* Style for the new inline status dot */
        .status-inline-dot {
            display: inline-block;
            width: 0.5rem; /* 小圆点大小 */
            height: 0.5rem;
            border-radius: 50%;
            margin-right: 0.25rem; /* 圆点与文字的间距 */
            vertical-align: middle; /* 垂直对齐 */
            flex-shrink: 0; /* 不让圆点收缩 */
        }
        .status-inline-dot.status-green {
            background-color: var(--status-green);
        }
        .status-inline-dot.status-red {
            background-color: var(--status-red);
        }

        .value-display.accent {
            color: var(--accent-color);
        }

        .error {
            color: var(--error-color);
            font-weight: bold;
        }
        .chart-error-message {
            text-align: center;
            padding: 0.8rem;
            font-size: 0.9rem;
            margin-top: auto;
            margin-bottom: 0;
        }

        .refresh-controls {
            text-align: center;
            margin-top: 1.5rem; /* 调整外边距 */
            margin-bottom: 1.5rem;
            font-size: 0.9rem;
            color: var(--label-color);
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            align-items: center;
            gap: 0.6rem;
            padding: 0.5rem;
            border-top: 1px solid var(--border-color);
        }
        .refresh-controls label {
            font-weight: 500;
            margin-right: 0.25rem;
        }
        .refresh-controls select,
        .refresh-controls input[type="number"],
        .refresh-controls button {
            padding: 0.4rem 0.8rem;
            border-radius: var(--radius-control);
            border: 1px solid var(--border-color);
            background-color: var(--card-bg);
            color: var(--text-color);
            font-size: 0.9rem;
            transition: all 0.2s ease-in-out;
            outline: none;
        }
        .refresh-controls select:focus,
        .refresh-controls input[type="number"]:focus {
            border-color: var(--accent-color);
            box-shadow: 0 0 0 2px rgba(0, 122, 255, 0.2);
        }
        .refresh-controls button {
            cursor: pointer;
            background-color: var(--accent-color);
            color: white;
            border-color: var(--accent-color);
        }
        .refresh-controls button:hover {
            opacity: 0.9;
            transform: translateY(-0.5px);
        }
        .refresh-controls button:active {
            transform: translateY(0);
        }
        .refresh-controls input[type="number"] {
            width: 3.5rem;
            text-align: center;
        }


        /* Dark Mode Toggle Button */
        #theme-toggle {
            position: absolute;
            top: 50%;
            right: 1.25rem; /* 调整位置 */
            transform: translateY(-50%);
            background-color: var(--toggle-bg);
            border: 1px solid var(--border-color);
            border-radius: 50%; 
            width: 2.2rem; /* 调整大小 */
            height: 2.2rem; 
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            outline: none;
            transition: background-color 0.3s ease-in-out, border-color 0.3s ease-in-out, transform 0.2s ease-out, box-shadow 0.2s ease-out;
            box-shadow: var(--toggle-shadow);
        }

        #theme-toggle:hover {
            background-color: var(--toggle-hover);
            transform: translateY(-50%) scale(1.02);
            box-shadow: var(--toggle-shadow);
        }
        #theme-toggle:active {
            transform: translateY(-50%) scale(0.98);
        }

        #theme-toggle svg {
            width: 1rem; /* 调整图标大小 */
            height: 1rem;
            fill: var(--toggle-color);
            transition: fill 0.3s ease-in-out;
        }
        
        /* --- Responsive adjustments --- */
        /* For screens narrower than 1100px (e.g., larger tablets in landscape, smaller desktops) */
        @media (max-width: 1100px) {
            .container {
                flex-direction: column;
                align-items: center;
                margin: 1rem auto; /* 调整间距 */
                gap: 0.8rem; /* 调整间距 */
            }
            .card {
                max-width: 98%;
                min-width: unset;
                width: 100%;
                padding: 1.2rem; /* 调整内边距 */
            }
            .label {
                width: 8rem; /* 调整标签宽度 */
            }
            .chart-card {
                min-width: unset;
            }
            .chart-canvas-container {
                height: 240px; /* 调整高度 */
            }
            /* Gradient bars responsive adjustment */
            .header-gradient-bar {
                max-width: 120px;
                height: 3.5px;
                margin-bottom: 1.2rem;
            }
            .card-title-gradient-bar {
                height: 2.5px;
                margin-bottom: 0.8rem;
            }
        }

        /* For screens narrower than 768px (e.g., most tablets in portrait, iPhone 14 Pro type devices) */
        @media (max-width: 768px) {
            html {
                font-size: 17px; /* 提高基准字体大小，确保手机端文字清晰 */
            }
            body {
                padding: 0.8rem; /* 约 13.6px，舒适的页面边距 */
            }
            .header {
                margin-bottom: 0.8rem;
                padding-bottom: 0.4rem;
            }
            .header h1 {
                font-size: 1.8rem; /* 手机主标题字号，确保可读性 */
            }
            .header-gradient-bar {
                max-width: 100px;
                height: 3px;
                margin-bottom: 0.8rem;
            }
            .card {
                padding: 1rem; /* 手机卡片内边距 */
                border-radius: 0.6rem; /* 手机卡片圆角 */
            }
            h2 {
                font-size: 1.3rem; /* 手机卡片标题字号，确保可读性 */
                margin-bottom: 0.4rem;
                padding-bottom: 0;
            }
            .card-title-gradient-bar {
                height: 2px;
                margin-bottom: 0.7rem;
            }
            
            /* 手机端保持紧凑布局 */
            p {
                flex-direction: row; 
                align-items: baseline;
                justify-content: space-between; /* 在手机上也使用两端对齐 */
                margin: 0;
                padding: 0.4rem 0.1rem; /* 调整手机端的垂直内边距 */
                font-size: 1rem;
            }
            .label {
                width: auto; /* 自动宽度 */
                text-align: left; /* 左对齐 */
                padding-right: 0.5rem; /* 增加一点右边距，防止贴太近 */
                white-space: nowrap; /* 手机端标签不换行 */
                flex-shrink: 1; /* 允许标签收缩 */
            }
            .value-display {
                white-space: nowrap; /* 不换行 */
                overflow: hidden;
                text-overflow: ellipsis; /* 溢出时显示省略号 */
                text-align: right;
                font-size: 1em; /* 手机端数值字体恢复正常大小 */
            }

            #theme-toggle {
                right: 0.5rem;
                width: 2rem;
                height: 2rem;
            }
            #theme-toggle svg {
                width: 0.9rem;
                height: 0.9rem;
            }
            .refresh-controls {
                margin-top: 0.8rem;
                margin-bottom: 0.8rem;
                gap: 0.4rem;
                padding: 0.3rem;
            }
            .refresh-controls select,
            .refresh-controls input[type="number"],
            .refresh-controls button {
                padding: 0.25rem 0.5rem;
                font-size: 0.85rem;
                border-radius: 0.3rem;
            }
            .chart-canvas-container {
                height: 180px; /* 手机图表高度 */
            }
        }

        /* For very small screens narrower than 400px (typical smaller phones) */
        @media (max-width: 400px) {
            html {
                font-size: 16px; /* 更小的屏幕，稍微调低基准字体，避免过度拥挤 */
            }
            body {
                padding: 0.6rem; /* 最小的页面边距 */
            }
            .header h1 {
                font-size: 1.6rem;
            }
            .header-gradient-bar {
                max-width: 80px;
                height: 2.5px;
                margin-bottom: 0.7rem;
            }
            .card {
                padding: 0.8rem;
                border-radius: 0.4rem;
            }
            h2 {
                font-size: 1.2rem;
            }
            .card-title-gradient-bar {
                height: 1.5px;
                margin-bottom: 0.6rem;
            }
            p {
                font-size: 0.95rem; /* 最小屏幕正文字号 */
                 padding: 0.3rem 0.1rem;
            }
            #theme-toggle {
                right: 0.4rem;
                width: 1.8rem;
                height: 1.8rem;
            }
            #theme-toggle svg {
                width: 0.8rem;
                height: 0.8rem;
            }
            .refresh-controls select,
            .refresh-controls input[type="number"],
            .refresh-controls button {
                padding: 0.2rem 0.4rem;
                font-size: 0.8rem;
                border-radius: 0.2rem;
            }
            .chart-canvas-container {
                height: 150px;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>DNS 服务监控</h1>
        <div class="header-gradient-bar"></div> <!-- 主标题渐变色块 -->
        <button id="theme-toggle" aria-label="Toggle dark mode">
            <!-- SVG for Sun icon (displayed in dark mode) -->
            <svg id="sun-icon" style="display:none;" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12 2.5a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2a.5.5 0 0 1 .5-.5ZM12 19.5a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2a.5.5 0 0 1 .5-.5ZM5.5 6.134a.5.5 0 0 1 .354.147l1.414 1.414a.5.5 0 0 1-.708.708L5.146 6.985a.5.5 0 0 1 .147-.354ZM18.496 17.854a.5.5 0 0 1-.708-.708l1.414-1.414a.5.5 0 0 1 .708.708l-1.414 1.414ZM3.5 12a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1h-2a.5.5 0 0 1-.5-.5ZM18.5 12a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1h-2a.5.5 0 0 1-.5-.5ZM5.146 17.854a.5.5 0 0 1 .708.708l-1.414 1.414a.5.5 0 0 1-.708-.708l1.414-1.414ZM18.866 6.134a.5.5 0 0 1-.147.354l-1.414 1.414a.5.5 0 0 1-.708-.708l1.414-1.414a.5.5 0 0 1 .354-.147ZM12 7.5a4.5 4.5 0 1 0 0 9a4.5 4.5 0 0 0 0-9Zm0 1a3.5 3.5 0 1 1 0 7a3.5 3.5 0 0 1 0-7Z"/></svg>
            <!-- SVG for Moon icon (displayed in light mode) -->
            <svg id="moon-icon" style="display:block;" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12.87 2.441a1 1 0 0 1 1.258 1.547A8.001 8.001 0 0 0 12 20a8.001 8.001 0 0 0 8-8c0-.629-.126-1.23-.357-1.785a1 1 0 0 1 1.547-1.258A10.001 10.001 0 0 1 22 12c0 5.523-4.477 10-10 10S2 17.523 2 12S6.477 2 12 2a9.96 9.96 0 0 1 .87.441Z"/></svg>
        </button>
    </div>

    <div class="container">
        <!-- Unbound Status Card -->
        <div class="card unbound-card">
            <h2><span class="title-text">Unbound 服务状态</span></h2> <!-- 移除 H2 状态点 -->
            <div class="card-title-gradient-bar"></div>
            <p><span class="label">状态</span> <span class="value-display"><span id="unbound-status-dot-inline" class="status-inline-dot"></span> <span id="unbound_status">加载中...</span></span></p>
            <p><span class="label">运行时间</span> <span id="unbound_uptime" class="value-display">加载中...</span></p>
            <p><span class="label">查询总数</span> <span id="unbound_total_queries" class="value-display accent">加载中...</span></p>
            <p><span class="label">缓存命中次数</span> <span id="unbound_cache_hits" class="value-display accent">加载中...</span></p>
            <p><span class="label">缓存未命中次数</span> <span id="unbound_cache_misses" class="value-display accent">加载中...</span></p>
            <p><span class="label">缓存命中率</span> <span id="unbound_cache_hit_percentage" class="value-display accent">加载中...</span></p>
            <p><span class="label">预取次数</span> <span id="unbound_prefetch_count" class="value-display accent">加载中...</span></p>
            <p><span class="label">过期条目数</span> <span id="unbound_expired_entries" class="value-display accent">加载中...</span></p>
            <p><span class="label">递归回复次数</span> <span id="unbound_recursive_replies" class="value-display accent">加载中...</span></p>
            <p><span class="label">平均递归时间</span> <span id="unbound_avg_recursion_time_s" class="value-display accent">加载中...</span></p>
            <p><span class="label">中位递归时间</span> <span id="unbound_median_recursion_time_s" class="value-display accent">加载中...</span></p>
        </div>

        <!-- Redis Status Card -->
        <div class="card redis-card">
            <h2><span class="title-text">Redis 服务状态</span></h2> <!-- 移除 H2 状态点 -->
            <div class="card-title-gradient-bar"></div>
            <p><span class="label">状态</span> <span class="value-display"><span id="redis-status-dot-inline" class="status-inline-dot"></span> <span id="redis_status">加载中...</span></span></p>
            <p><span class="label">运行时间</span> <span id="redis_uptime" class="value-display">加载中...</span></p>
            <p><span class="label">数据库大小</span> <span id="redis_database_size_records" class="value-display accent">加载中...</span></p>
            <p><span class="label">键空间命中次数</span> <span id="redis_keyspace_hits" class="value-display accent">加载中...</span></p>
            <p><span class="label">键空间未命中次数</span> <span id="redis_keyspace_misses" class="value-display accent">加载中...</span></p>
            <p><span class="label">键空间命中率</span> <span id="redis_keyspace_hit_percentage" class="value-display accent">加载中...</span></p>
            <p><span class="label">已用内存</span> <span id="redis_used_memory" class="value-display accent">加载中...</span></p>
            <p><span class="label">常驻内存</span> <span id="redis_resident_memory" class="value-display accent">加载中...</span></p>
            <p><span class="label">内存使用峰值</span> <span id="redis_used_memory_peak" class="value-display accent">加载中...</span></p>
        </div>

        <!-- Query Trend Chart Card -->
        <div class="card chart-card">
            <h2><span class="title-text">查询趋势 (每秒查询量)</span> <span id="chart-status-dot" class="status-dot"></span></h2> <!-- 仅图表保留 H2 状态点 -->
            <div class="card-title-gradient-bar"></div>
            <div class="chart-canvas-container">
                <canvas id="queryTrendChart"></canvas>
            </div>
            <p class="chart-error-message error" style="display:none;"></p>
        </div>
    </div>

    <!-- Refresh Controls and Last Updated Info -->
    <div class="refresh-controls">
        <span id="last_updated"></span>
        <label for="refresh-select">刷新频率:</label>
        <select id="refresh-select">
            <option value="1000">实时 (1秒)</option>
            <option value="5000" selected>5秒</option>
            <option value="10000">10秒</option>
            <option value="30000">30秒</option>
            <option value="60000">1分钟</option>
            <option value="custom">自定义</option>
        </select>
        <input type="number" id="custom-refresh-input" placeholder="秒" min="1" style="display:none;">
        <button id="apply-refresh-btn" style="display:none;">应用</button>

        <label for="qps-smooth-select">QPS 平滑窗口:</label>
        <select id="qps-smooth-select">
            <option value="0">无平滑 (瞬时QPS)</option>
            <option value="5">近5秒平均</option>
            <option value="10">近10秒平均</option>
            <option value="30" selected>近30秒平均</option>
            <option value="60">近1分钟平均</option>
            <option value="300">近5分钟平均</option>
        </select>

        <button id="refresh-now-btn">立即刷新</button>
    </div>

    <script>
        const apiUrl = '/api/status';
        const themeToggle = document.getElementById('theme-toggle');
        const body = document.body;
        const sunIcon = document.getElementById('sun-icon');
        const moonIcon = document.getElementById('moon-icon');

        const refreshSelect = document.getElementById('refresh-select');
        const customRefreshInput = document.getElementById('custom-refresh-input');
        const applyRefreshBtn = document.getElementById('apply-refresh-btn');
        const refreshNowBtn = document.getElementById('refresh-now-btn');
        const lastUpdatedSpan = document.getElementById('last_updated');
        const qpsSmoothSelect = document.getElementById('qps-smooth-select');

        let currentIntervalId;
        let currentRefreshInterval = 5000;

        let queryTrendChart;
        const maxDataPoints = 60;
        let queryHistory = []; // Stores { time: timestamp_ms, queries: total_queries } for QPS smoothing
        let qpsSmoothingWindowSeconds = 30; // Default smoothing window for QPS

        function setTheme(mode) {
            if (mode === 'dark') {
                body.classList.add('dark-mode');
                sunIcon.style.display = 'block';
                moonIcon.style.display = 'none';
                localStorage.setItem('theme', 'dark');
            } else {
                body.classList.remove('dark-mode');
                sunIcon.style.display = 'none';
                moonIcon.style.display = 'block';
                localStorage.setItem('theme', 'light');
            }
            updateChartTheme();
        }

        const savedTheme = localStorage.getItem('theme');
        if (savedTheme) {
            setTheme(savedTheme);
        } else if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
            setTheme('dark');
        } else {
            setTheme('light');
        }

        themeToggle.addEventListener('click', () => {
            if (body.classList.contains('dark-mode')) {
                setTheme('light');
            } else {
                setTheme('dark');
            }
        });

        // Modified updateStatusDot function: it now removes 'pulsing' class and only adds color classes
        function updateStatusDot(dotElement, isHealthy) {
            if (!dotElement) return;

            dotElement.classList.remove('status-green', 'status-red', 'pulsing'); // Ensure pulsing is removed
            if (isHealthy) {
                dotElement.classList.add('status-green');
            } else {
                dotElement.classList.add('status-red');
            }
        }

        function initializeChart() {
            const ctx = document.getElementById('queryTrendChart');
            if (!ctx) {
                console.error("Canvas element 'queryTrendChart' not found!");
                return;
            }
            const ctx2d = ctx.getContext('2d');

            queryTrendChart = new Chart(ctx2d, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: '每秒查询量 (QPS)',
                        data: [],
                        borderColor: 'var(--chart-line-color)',
                        backgroundColor: 'rgba(0, 122, 255, 0.2)',
                        borderWidth: 2,
                        pointRadius: 4,
                        pointBackgroundColor: 'var(--chart-point-color)',
                        tension: 0.3,
                        fill: true,
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    animation: {
                        duration: 0
                    },
                    scales: {
                        x: {
                            type: 'category',
                            title: {
                                display: true,
                                text: '时间',
                                color: 'var(--chart-tick-color)'
                            },
                            ticks: {
                                color: 'var(--chart-tick-color)'
                            },
                            grid: {
                                color: 'var(--chart-grid-color)'
                            }
                        },
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: '查询量',
                                color: 'var(--chart-tick-color)'
                            },
                            ticks: {
                                color: 'var(--chart-tick-color)'
                            },
                            grid: {
                                color: 'var(--chart-grid-color)'
                            }
                        }
                    },
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    let label = context.dataset.label || '';
                                    if (label) {
                                        label += ': ';
                                    }
                                    if (context.parsed.y !== null) {
                                        label += context.parsed.y.toFixed(2);
                                    }
                                    return label;
                                }
                            },
                            backgroundColor: 'var(--chart-tooltip-bg)',
                            borderColor: 'var(--chart-tooltip-border)',
                            borderWidth: 1,
                            titleColor: 'var(--chart-tooltip-text)',
                            bodyColor: 'var(--chart-tooltip-text)',
                        },
                        legend: {
                            display: true,
                            labels: {
                                color: 'var(--chart-tick-color)'
                            }
                        }
                    }
                }
            });
        }

        function updateChartTheme() {
            if (queryTrendChart) {
                queryTrendChart.options.scales.x.grid.color = getComputedStyle(document.documentElement).getPropertyValue('--chart-grid-color');
                queryTrendChart.options.scales.x.ticks.color = getComputedStyle(document.documentElement).getPropertyValue('--chart-tick-color');
                queryTrendChart.options.scales.x.title.color = getComputedStyle(document.documentElement).getPropertyValue('--chart-tick-color');
                queryTrendChart.options.scales.y.grid.color = getComputedStyle(document.documentElement).getPropertyValue('--chart-grid-color');
                queryTrendChart.options.scales.y.ticks.color = getComputedStyle(document.documentElement).getPropertyValue('--chart-tick-color');
                queryTrendChart.options.scales.y.title.color = getComputedStyle(document.documentElement).getPropertyValue('--chart-tick-color');
                queryTrendChart.data.datasets[0].borderColor = getComputedStyle(document.documentElement).getPropertyValue('--chart-line-color');
                queryTrendChart.data.datasets[0].backgroundColor = getComputedStyle(document.documentElement).getPropertyValue('--chart-line-color').replace('rgb', 'rgba').replace(')', ', 0.2)');
                queryTrendChart.data.datasets[0].pointBackgroundColor = getComputedStyle(document.documentElement).getPropertyValue('--chart-point-color');
                queryTrendChart.options.plugins.tooltip.backgroundColor = getComputedStyle(document.documentElement).getPropertyValue('--chart-tooltip-bg');
                queryTrendChart.options.plugins.tooltip.borderColor = getComputedStyle(document.documentElement).getPropertyValue('--chart-tooltip-border');
                queryTrendChart.options.plugins.tooltip.titleColor = getComputedStyle(document.documentElement).getPropertyValue('--chart-tooltip-text');
                queryTrendChart.options.plugins.tooltip.bodyColor = getComputedStyle(document.documentElement).getPropertyValue('--chart-tooltip-text');
                queryTrendChart.options.plugins.legend.labels.color = getComputedStyle(document.documentElement).getPropertyValue('--chart-tick-color');

                queryTrendChart.update();
            }
        }

        async function fetchAndUpdateStatus() {
            try {
                const response = await fetch(apiUrl);
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                const data = await response.json();
                
                // === Unbound Stats Update ===
                const unboundStatusDotInline = document.getElementById('unbound-status-dot-inline'); // Get the new inline dot
                const unboundStatusEl = document.getElementById('unbound_status');
                const unboundUptimeEl = document.getElementById('unbound_uptime');
                const unboundTotalQueriesEl = document.getElementById('unbound_total_queries');
                const unboundCacheHitsEl = document.getElementById('unbound_cache_hits');
                const unboundCacheMissesEl = document.getElementById('unbound_cache_misses');
                const unboundCacheHitPercentageEl = document.getElementById('unbound_cache_hit_percentage');
                const unboundPrefetchCountEl = document.getElementById('unbound_prefetch_count');
                const unboundExpiredEntriesEl = document.getElementById('unbound_expired_entries');
                const unboundRecursiveRepliesEl = document.getElementById('unbound_recursive_replies');
                const unboundAvgRecursionTimeEl = document.getElementById('unbound_avg_recursion_time_s');
                const unboundMedianRecursionTimeEl = document.getElementById('unbound_median_recursion_time_s');

                if (unboundStatusEl) { // Ensure elements exist before updating
                    if (data.unbound && !data.unbound.error) {
                        updateStatusDot(unboundStatusDotInline, true); // Update the inline dot
                        unboundStatusEl.textContent = data.unbound.status || 'N/A'; // Update text
                        unboundStatusEl.classList.remove('error');
                        unboundUptimeEl.textContent = data.unbound.uptime || 'N/A';
                        unboundTotalQueriesEl.textContent = data.unbound.total_queries || '0';
                        unboundCacheHitsEl.textContent = data.unbound.cache_hits || '0';
                        unboundCacheMissesEl.textContent = data.unbound.cache_misses || '0';
                        unboundCacheHitPercentageEl.textContent = data.unbound.cache_hit_percentage || '0.00%';
                        unboundPrefetchCountEl.textContent = data.unbound.prefetch_count || '0';
                        unboundExpiredEntriesEl.textContent = data.unbound.expired_entries || '0';
                        unboundRecursiveRepliesEl.textContent = data.unbound.recursive_replies || '0';
                        unboundAvgRecursionTimeEl.textContent = (data.unbound.avg_recursion_time_s !== undefined ? data.unbound.avg_recursion_time_s.toFixed(3) : '0.000') + ' s';
                        unboundMedianRecursionTimeEl.textContent = (data.unbound.median_recursion_time_s !== undefined ? data.unbound.median_recursion_time_s.toFixed(3) : '0.000') + ' s';
                    } else {
                        updateStatusDot(unboundStatusDotInline, false); // Update the inline dot to red
                        unboundStatusEl.classList.add('error');
                        unboundStatusEl.textContent = `错误: ${data.unbound ? data.unbound.error : '未知错误'}`; // Update text
                        unboundUptimeEl.textContent = 'N/A';
                        unboundTotalQueriesEl.textContent = 'N/A';
                        unboundCacheHitsEl.textContent = 'N/A';
                        unboundCacheMissesEl.textContent = 'N/A';
                        unboundCacheHitPercentageEl.textContent = 'N/A';
                        unboundPrefetchCountEl.textContent = 'N/A';
                        unboundExpiredEntriesEl.textContent = 'N/A';
                        unboundRecursiveRepliesEl.textContent = 'N/A';
                        unboundAvgRecursionTimeEl.textContent = 'N/A';
                        unboundMedianRecursionTimeEl.textContent = 'N/A';
                    }
                }


                // === Redis Stats Update ===
                const redisStatusDotInline = document.getElementById('redis-status-dot-inline'); // Get the new inline dot
                const redisStatusEl = document.getElementById('redis_status');
                const redisUptimeEl = document.getElementById('redis_uptime');
                const redisDatabaseSizeEl = document.getElementById('redis_database_size_records');
                const redisKeyspaceHitsEl = document.getElementById('redis_keyspace_hits');
                const redisKeyspaceMissesEl = document.getElementById('redis_keyspace_misses');
                const redisKeyspaceHitPercentageEl = document.getElementById('redis_keyspace_hit_percentage');
                const redisUsedMemoryEl = document.getElementById('redis_used_memory');
                const redisResidentMemoryEl = document.getElementById('redis_resident_memory');
                const redisUsedMemoryPeakEl = document.getElementById('redis_used_memory_peak');

                if (redisStatusEl) { // Ensure elements exist before updating
                    if (data.redis && !data.redis.error) {
                        updateStatusDot(redisStatusDotInline, true);
                        redisStatusEl.textContent = data.redis.status || 'N/A';
                        redisStatusEl.classList.remove('error');
                        redisUptimeEl.textContent = data.redis.uptime || 'N/A';
                        redisDatabaseSizeEl.textContent = data.redis.database_size_records || '0';
                        redisKeyspaceHitsEl.textContent = data.redis.keyspace_hits || '0';
                        redisKeyspaceMissesEl.textContent = data.redis.keyspace_misses || '0';
                        redisKeyspaceHitPercentageEl.textContent = data.redis.keyspace_hit_percentage || '0.00%';
                        redisUsedMemoryEl.textContent = data.redis.used_memory || '0M';
                        redisResidentMemoryEl.textContent = data.redis.resident_memory || '0M';
                        redisUsedMemoryPeakEl.textContent = data.redis.used_memory_peak || '0M';
                    } else {
                        updateStatusDot(redisStatusDotInline, false);
                        redisStatusEl.classList.add('error');
                        redisStatusEl.textContent = `错误: ${data.redis ? data.redis.error : '未知错误'}`;
                        redisUptimeEl.textContent = 'N/A';
                        redisDatabaseSizeEl.textContent = 'N/A';
                        redisKeyspaceHitsEl.textContent = 'N/A';
                        redisKeyspaceMissesEl.textContent = 'N/A';
                        redisKeyspaceHitPercentageEl.textContent = 'N/A';
                        redisUsedMemoryEl.textContent = 'N/A';
                        redisResidentMemoryEl.textContent = 'N/A';
                        redisUsedMemoryPeakEl.textContent = 'N/A';
                    }
                }

                lastUpdatedSpan.textContent = `最后更新: ${new Date().toLocaleTimeString()}`;

                // === Chart Data Update ===
                const chartStatusDotCurrent = document.getElementById('chart-status-dot'); // Chart's dot remains in H2
                const chartCanvas = document.getElementById('queryTrendChart');
                const chartErrorMessage = document.querySelector('.chart-card .chart-error-message');

                if (data.unbound && !data.unbound.error && queryTrendChart && chartCanvas) {
                    chartCanvas.style.display = 'block';
                    if (chartErrorMessage) {
                        chartErrorMessage.style.display = 'none';
                    }
                    updateStatusDot(chartStatusDotCurrent, true); // Update chart's H2 dot

                    const currentTotalQueries = parseInt(data.unbound.total_queries);
                    const currentTime = Date.now();

                    // Add current data point to history
                    queryHistory.push({ time: currentTime, queries: currentTotalQueries });

                    // Trim history to include only points within the smoothing window
                    const minTime = currentTime - qpsSmoothingWindowSeconds * 1000;
                    queryHistory = queryHistory.filter(point => point.time >= minTime);

                    let qps = 0;
                    if (qpsSmoothingWindowSeconds === 0) { // No smoothing (instantaneous QPS based on last refresh)
                        if (queryHistory.length >= 2) {
                            const lastPoint = queryHistory[queryHistory.length - 1];
                            const secondLastPoint = queryHistory[queryHistory.length - 2];
                            const queriesDiff = Math.max(0, lastPoint.queries - secondLastPoint.queries);
                            const timeDiffSeconds = (lastPoint.time - secondLastPoint.time) / 1000;
                            if (timeDiffSeconds > 0) {
                                qps = queriesDiff / timeDiffSeconds;
                            }
                        }
                    } else { // Use smoothing window
                        if (queryHistory.length >= 2) {
                            const oldestPoint = queryHistory[0];
                            const newestPoint = queryHistory[queryHistory.length - 1];
                            const queriesDiff = Math.max(0, newestPoint.queries - oldestPoint.queries);
                            const timeDiffSeconds = (newestPoint.time - oldestPoint.time) / 1000;

                            if (timeDiffSeconds > 0) {
                                qps = queriesDiff / timeDiffSeconds;
                            }
                        }
                    }

                    // Add new data point to chart
                    queryTrendChart.data.labels.push(new Date().toLocaleTimeString());
                    queryTrendChart.data.datasets[0].data.push(qps.toFixed(2));

                    // Trim chart data to maxDataPoints
                    if (queryTrendChart.data.labels.length > maxDataPoints) {
                        queryTrendChart.data.labels.shift();
                        queryTrendChart.data.datasets[0].data.shift();
                    }
                    queryTrendChart.update();
                } else {
                    updateStatusDot(chartStatusDotCurrent, false); // Update chart's H2 dot to red
                    if (queryTrendChart) { // Clear chart data
                        queryTrendChart.data.labels = [];
                        queryTrendChart.data.datasets[0].data = [];
                        queryTrendChart.update();
                    }
                    if (chartCanvas) { // Hide canvas
                        chartCanvas.style.display = 'none';
                    }
                    if (chartErrorMessage) { // Show error message
                        chartErrorMessage.style.display = 'block';
                        chartErrorMessage.textContent = `无法更新图表数据: ${data.unbound ? (data.unbound.error || 'Unbound数据错误') : 'Unbound数据缺失或连接错误'}`;
                    }
                }

            } catch (error) {
                console.error("Error fetching status:", error);
                const unboundStatusDotInline = document.getElementById('unbound-status-dot-inline');
                const redisStatusDotInline = document.getElementById('redis-status-dot-inline');
                const chartStatusDotCurrent = document.getElementById('chart-status-dot');
                
                updateStatusDot(unboundStatusDotInline, false);
                updateStatusDot(redisStatusDotInline, false);
                updateStatusDot(chartStatusDotCurrent, false); // Update chart's H2 dot

                const unboundStatusEl = document.getElementById('unbound_status');
                if (unboundStatusEl) {
                    unboundStatusEl.classList.add('error');
                    unboundStatusEl.textContent = `连接错误`;
                    document.getElementById('unbound_uptime').textContent = 'N/A';
                    document.getElementById('unbound_total_queries').textContent = 'N/A';
                    document.getElementById('unbound_cache_hits').textContent = 'N/A';
                    document.getElementById('unbound_cache_misses').textContent = 'N/A';
                    document.getElementById('unbound_cache_hit_percentage').textContent = 'N/A';
                    document.getElementById('unbound_prefetch_count').textContent = 'N/A';
                    document.getElementById('unbound_expired_entries').textContent = 'N/A';
                    document.getElementById('unbound_recursive_replies').textContent = 'N/A';
                    document.getElementById('unbound_avg_recursion_time_s').textContent = 'N/A';
                    document.getElementById('unbound_median_recursion_time_s').textContent = 'N/A';
                }
                
                const redisStatusEl = document.getElementById('redis_status');
                if (redisStatusEl) {
                    redisStatusEl.classList.add('error');
                    redisStatusEl.textContent = `连接错误`;
                    document.getElementById('redis_uptime').textContent = 'N/A';
                    document.getElementById('redis_database_size_records').textContent = 'N/A';
                    document.getElementById('redis_keyspace_hits').textContent = 'N/A';
                    document.getElementById('redis_keyspace_misses').textContent = 'N/A';
                    document.getElementById('redis_keyspace_hit_percentage').textContent = 'N/A';
                    document.getElementById('redis_used_memory').textContent = 'N/A';
                    document.getElementById('redis_resident_memory').textContent = 'N/A';
                    document.getElementById('redis_used_memory_peak').textContent = 'N/A';
                }

                const chartCanvas = document.getElementById('queryTrendChart');
                const chartErrorMessage = document.querySelector('.chart-card .chart-error-message');

                if (queryTrendChart) {
                    queryTrendChart.data.labels = [];
                    queryTrendChart.data.datasets[0].data = [];
                    queryTrendChart.update();
                }
                if (chartCanvas) {
                    chartCanvas.style.display = 'none';
                }
                if (chartErrorMessage) {
                    chartErrorMessage.style.display = 'block';
                    chartErrorMessage.textContent = `连接错误，无法更新图表数据。`;
                }
            }
        }

        refreshSelect.addEventListener('change', (event) => {
            const selectedValue = event.target.value;
            if (selectedValue === 'custom') {
                customRefreshInput.style.display = 'inline-block';
                applyRefreshBtn.style.display = 'inline-block';
                customRefreshInput.focus();
            } else {
                customRefreshInput.style.display = 'none';
                applyRefreshBtn.style.display = 'none';
                startAutoRefresh(parseInt(selectedValue, 10));
            }
        });

        applyRefreshBtn.addEventListener('click', () => {
            let customSeconds = parseInt(customRefreshInput.value, 10);
            if (isNaN(customSeconds) || customSeconds < 1) {
                alert('请输入一个有效的刷新秒数 (至少为 1)。');
                return;
            }
            startAutoRefresh(customSeconds * 1000);
        });

        refreshNowBtn.addEventListener('click', () => {
            fetchAndUpdateStatus();
        });

        qpsSmoothSelect.addEventListener('change', (event) => {
            qpsSmoothingWindowSeconds = parseInt(event.target.value, 10);
            localStorage.setItem('qpsSmoothingWindow', qpsSmoothingWindowSeconds);
            // Re-fetch data immediately to update the chart with new smoothing
            fetchAndUpdateStatus();
        });

        function startAutoRefresh(intervalMs) {
            clearInterval(currentIntervalId);
            currentRefreshInterval = intervalMs;
            currentIntervalId = setInterval(fetchAndUpdateStatus, intervalMs);
            localStorage.setItem('refreshInterval', intervalMs);
        }

        function initializePage() {
            initializeChart();
            
            const savedRefreshInterval = localStorage.getItem('refreshInterval');
            if (savedRefreshInterval) {
                let foundOption = false;
                for (let i = 0; i < refreshSelect.options.length; i++) {
                    if (refreshSelect.options[i].value === savedRefreshInterval) {
                        refreshSelect.value = savedRefreshInterval;
                        foundOption = true;
                        break;
                    }
                }
                if (!foundOption) {
                    refreshSelect.value = 'custom';
                    customRefreshInput.style.display = 'inline-block';
                    applyRefreshBtn.style.display = 'inline-block';
                    customRefreshInput.value = parseInt(savedRefreshInterval, 10) / 1000;
                }
                currentRefreshInterval = parseInt(savedRefreshInterval, 10);
            } else {
                refreshSelect.value = currentRefreshInterval;
            }

            const savedQpsSmoothingWindow = localStorage.getItem('qpsSmoothingWindow');
            if (savedQpsSmoothingWindow !== null) {
                qpsSmoothingWindowSeconds = parseInt(savedQpsSmoothingWindow, 10);
                let foundSmoothOption = false;
                for (let i = 0; i < qpsSmoothSelect.options.length; i++) {
                    if (qpsSmoothSelect.options[i].value === savedQpsSmoothingWindow) {
                        qpsSmoothSelect.value = savedQpsSmoothingWindow;
                        foundSmoothOption = true;
                        break;
                    }
                }
                if (!foundSmoothOption) {
                    qpsSmoothSelect.value = "30";
                    qpsSmoothingWindowSeconds = 30;
                }
            } else {
                qpsSmoothSelect.value = qpsSmoothingWindowSeconds;
            }

            fetchAndUpdateStatus();
            startAutoRefresh(currentRefreshInterval);
        }

        document.addEventListener('DOMContentLoaded', initializePage);
    </script>
</body>
</html>
EOF

    if [ $? -ne 0 ]; then
        log_error "无法创建 index.html 文件。"
        return 1
    fi
    run_command chown "$WEB_USER:$WEB_USER" "$PROJECT_DIR/templates/index.html"
    log_info "HTML 前端页面 (index.html) 已创建。"

    log_blue "[步骤 8/8] 创建 Systemd 服务文件并启动服务..." # 更新步骤号
    cat <<EOF > "$SYSTEMD_SERVICE_FILE"
[Unit]
Description=DNS Monitoring Flask App
After=network.target

[Service]
User=$WEB_USER
Group=$WEB_USER
WorkingDirectory=$PROJECT_DIR
ExecStart=$VENV_DIR/bin/gunicorn -w 4 -b 0.0.0.0:$FLASK_PORT app:app
Restart=always
# RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

    if [ $? -eq 0 ]; then
        run_command systemctl daemon-reload
        run_command systemctl enable "$FLASK_APP_NAME"
        run_command systemctl start "$FLASK_APP_NAME"
        if [ $? -eq 0 ]; then
            log_info "Systemd 服务已创建、启用并启动。"
        else
            log_error "Systemd 服务创建成功，但启动失败。请手动检查日志: 'sudo journalctl -u $FLASK_APP_NAME -f'"
            return 1
        fi
    else
        log_error "无法创建 Systemd 服务文件。"
        return 1
    fi

    log_blue "[附加] 配置防火墙 (UFW) 允许访问 $FLASK_PORT 端口..."
    if command -v ufw &>/dev/null; then
        run_command ufw allow "$FLASK_PORT"/tcp
        run_command ufw reload
        log_info "防火墙已配置。"
    else
        log_warn "未检测到 UFW。请手动检查并配置您的防火墙以允许访问 ${FLASK_PORT} 端口。"
    fi

    echo ""
    log_green "--- 部署完成！---"
    log_info "您现在可以通过以下地址访问监控页面："
    log_blue "  http://$(hostname -I | awk '{print $1}'):$FLASK_PORT"
    log_info "或使用服务器的公网 IP 地址。"
    log_info "监控页面部署在 ${PROJECT_DIR}。"
    log_info "日志可以通过 'sudo journalctl -u $FLASK_APP_NAME -f' 查看。"
    echo ""
    return 0
}

# --- 诊断与修复函数 ---
diagnose_and_fix() {
    echo ""
    log_blue "--- 正在启动诊断与修复流程 ---"
    local issues_found=0

    # 1. 检查 Unbound 服务
    log_blue "[诊断] 检查 Unbound 服务状态..."
    if systemctl is-active --quiet unbound; then
        log_info "Unbound 服务: 运行中。"
    else
        log_warn "Unbound 服务: 未运行。尝试启动..."
        run_command systemctl start unbound
        if [ $? -eq 0 ]; then
            log_info "Unbound 服务已启动。"
        else
            log_error "无法启动 Unbound 服务。请手动检查: 'sudo systemctl status unbound'"
            issues_found=1
        fi
    fi

    # 2. 检查 Redis 安装和启动
    log_blue "[诊断] 检查 Redis 服务状态和安装..."
    local redis_server_cmd_path=$(which redis-server)
    local redis_is_listening=$(run_command ss -tulpn | grep -q ":6379.*redis-server") # 检查默认端口
    local redis_unix_socket_exists=$(ls -l "$REDIS_SOCKET_PATH" 2>/dev/null | grep -q "^srw") # 检查Unix socket文件是否存在且是socket
    local redis_service_active=$(systemctl is-active --quiet redis-server) # 检查Systemd服务名

    if [ -z "$redis_server_cmd_path" ]; then
        log_warn "Redis 服务端程序 (redis-server) 未找到。尝试安装 Redis..."
        run_command apt install -y redis-server
        if [ $? -eq 0 ]; then
            log_info "Redis 已成功安装。"
            # Redis 安装后通常会自动启动，并创建 'redis' 用户和组，更新路径和状态变量
            REDIS_CLI_PATH=$(which redis-cli) # 更新全局变量
            redis_server_cmd_path=$(which redis-server)
            redis_service_active=$(systemctl is-active --quiet redis-server)
            redis_is_listening=$(run_command ss -tulpn | grep -q ":6379.*redis-server")
            redis_unix_socket_exists=$(ls -l "$REDIS_SOCKET_PATH" 2>/dev/null | grep -q "^srw")
        else
            log_error "无法安装 Redis。请手动运行 'sudo apt install redis-server' 并检查错误。"
            issues_found=1
            # 如果 Redis 无法安装，后续的 Redis 检查就没有意义了
        fi
    else
        log_info "Redis 服务端程序 (redis-server) 已找到。"
    fi

    # 检查 Redis 进程是否在监听 (优先通过 Unix socket 路径判断，因为您的Unbound配置使用它)
    if [ "$redis_unix_socket_exists" == "True" ] || [ "$redis_is_listening" == "True" ]; then
        log_info "Redis 进程正在通过 Unix Socket 或 TCP 端口监听。"
        if [ "$redis_service_active" == "True" ]; then
            log_info "Redis 服务 (redis-server.service) 运行中。"
        else
            log_warn "Redis 进程正在运行，但 systemctl 无法找到或管理 'redis-server.service'。可能是手动启动或服务名不同。尝试启动该服务以注册到 Systemd..."
            run_command systemctl start redis-server # 尝试启动，如果不存在或错误，会失败
            if [ $? -eq 0 ]; then
                log_info "Redis 服务 (redis-server.service) 已成功启动并注册。"
            else
                log_warn "未能通过 systemctl 启动 'redis-server.service'。Redis 仍在运行，但未被 Systemd 正式管理。请检查 Redis 配置。"
            fi
        fi
    else
        log_warn "Redis 进程未在监听。尝试启动 Redis 服务 (redis-server.service)..."
        run_command systemctl start redis-server
        if [ $? -eq 0 ]; then
            log_info "Redis 服务 (redis-server.service) 已启动。"
        else
            log_error "无法启动 Redis 服务。请手动检查: 'sudo systemctl status redis-server' 或检查 Redis 配置。"
            issues_found=1
        fi
    fi

    # 3. 检查 Flask 应用服务
    log_blue "[诊断] 检查 DNS 监控服务 ($FLASK_APP_NAME) 状态..."
    if systemctl is-active --quiet "$FLASK_APP_NAME"; then
        log_info "DNS 监控服务: 运行中。"
    else
        log_warn "DNS 监控服务: 未运行。尝试启动..."
        run_command systemctl start "$FLASK_APP_NAME"
        if [ $? -eq 0 ]; then
            log_info "DNS 监控服务已启动。"
        else
            log_error "无法启动 DNS 监控服务。请手动检查: 'sudo journalctl -u $FLASK_APP_NAME -f'"
            issues_found=1
        fi
    fi

    # 4. 检查 Sudoers 配置
    log_blue "[诊断] 检查 sudoers 配置文件 ($SUDOERS_FILE)..."
    local expected_unbound_rule="$WEB_USER ALL=(root) NOPASSWD: $UNBOUND_CONTROL_PATH stats_noreset"
    local expected_redis_rule="$WEB_USER ALL=(root) NOPASSWD: $REDIS_CLI_PATH -s $REDIS_SOCKET_PATH info" # 注意这里改为 info
    
    if [ ! -f "$SUDOERS_FILE" ] || ! grep -qF "$expected_unbound_rule" "$SUDOERS_FILE" || ! grep -qF "$expected_redis_rule" "$SUDOERS_FILE"; then
        log_warn "sudoers 配置文件缺失或内容不正确。尝试重新生成..."
        run_command mkdir -p "$SUDOERS_DIR" # 确保目录存在
        cat <<EOF > "$SUDOERS_FILE"
# Generated by dns_monitor deployment script
# Allow $WEB_USER to run unbound-control stats_noreset without password
$WEB_USER ALL=(root) NOPASSWD: $UNBOUND_CONTROL_PATH stats_noreset

# Allow $WEB_USER to run redis-cli info without password
$WEB_USER ALL=(root) NOPASSWD: $REDIS_CLI_PATH -s $REDIS_SOCKET_PATH info
EOF
        if [ $? -eq 0 ]; then
            run_command chmod 0440 "$SUDOERS_FILE"
            log_info "sudoers 配置文件已重新生成并设置权限。"
        else
            log_error "无法重新生成 sudoers 配置文件。请手动检查: $SUDOERS_FILE"
            issues_found=1
        fi
    else
        log_info "sudoers 配置文件内容正确。"
    fi

    # 5. 检查 www-data 用户是否在 redis 组
    log_blue "[诊断] 检查 $WEB_USER 是否在 redis 组中..."
    if ! id -nG "$WEB_USER" | grep -qw "redis"; then
        log_warn "$WEB_USER 不在 'redis' 组中。尝试添加..."
        if getent group redis &>/dev/null; then # 确保 'redis' 组存在
            run_command usermod -aG redis "$WEB_USER"
            if [ $? -eq 0 ]; then
                log_info "$WEB_USER 已添加到 'redis' 组。您可能需要重启 '$FLASK_APP_NAME' 服务来使更改生效。"
                run_command systemctl restart "$FLASK_APP_NAME"
                log_info "DNS 监控服务已重启以应用组更改。"
            else
                log_error "无法将 $WEB_USER 添加到 'redis' 组。请手动检查。"
                issues_found=1
            fi
        else
            log_error "组 'redis' 不存在。无法添加 $WEB_USER 到该组。请确认 Redis 已正确安装。"
            issues_found=1
        fi
    else
        log_info "$WEB_USER 已在 'redis' 组中。"
    fi

    # 6. 检查 Unbound 远程控制配置
    log_blue "[诊断] 检查 Unbound 远程控制接口..."
    local unbound_main_conf="/etc/unbound/unbound.conf"
    local unbound_d_conf="/etc/unbound/unbound.conf.d/my-unbound.conf" # 假设用户自定义文件

    local remote_control_enabled=false
    local keys_exist=false

    if [ -f "$unbound_main_conf" ] && grep -qE "^\s*control-enable:\s*yes" "$unbound_main_conf"; then
        remote_control_enabled=true
    fi
    if [ -f "$unbound_d_conf" ] && grep -qE "^\s*control-enable:\s*yes" "$unbound_d_conf"; then
        remote_control_enabled=true
    fi

    if [ -f "/etc/unbound/unbound_server.key" ] && \
       [ -f "/etc/unbound/unbound_server.pem" ] && \
       [ -f "/etc/unbound/unbound_control.key" ] && \
       [ -f "/etc/unbound/unbound_control.pem" ]; then
        keys_exist=true
    fi

    if ! $remote_control_enabled || ! $keys_exist; then
        log_warn "Unbound 远程控制可能未启用或密钥文件缺失。尝试运行 'unbound-control-setup'..."
        run_command unbound-control-setup
        if [ $? -eq 0 ]; then
            log_info "'unbound-control-setup' 已运行。请检查 Unbound 配置以确保 'control-enable: yes'。"
            run_command systemctl restart unbound # 重启Unbound使配置生效
        else
            log_error "无法运行 'unbound-control-setup'。请手动检查。"
            issues_found=1
        fi
    else
        log_info "Unbound 远程控制已启用且密钥文件存在。"
    fi

    # 7. 检查防火墙规则
    log_blue "[诊断] 检查防火墙规则 (UFW) 是否允许 $FLASK_PORT 端口..."
    if command -v ufw &>/dev/null; then
        if ufw status | grep -qE "^$FLASK_PORT/tcp\s+(ALLOW IN|ALLOW Anywhere)"; then
            log_info "UFW 已配置，允许访问 $FLASK_PORT 端口。"
        else
            log_warn "UFW 未配置允许访问 $FLASK_PORT 端口。尝试添加规则..."
            run_command ufw allow "$FLASK_PORT"/tcp
            run_command ufw reload
            if [ $? -eq 0 ]; then
                log_info "UFW 规则已添加并重新加载。"
            else
                log_error "无法添加 UFW 规则。请手动检查防火墙配置。"
                issues_found=1
            fi
        fi
    else
        log_warn "未检测到 UFW。请手动检查并配置您的防火墙以允许访问 ${FLASK_PORT} 端口。"
    fi

    echo ""
    if [ $issues_found -eq 0 ]; then
        log_green "诊断完成。未发现主要问题，或问题已尝试修复。请刷新网页检查。"
    else
        log_warn "诊断完成。发现并尝试修复了一些问题。请检查上述错误信息，并刷新网页验证。"
    fi
    echo ""
}

# --- 主程序逻辑 ---

clear
echo -e "${BLUE}--- DNS 服务监控页面部署与回滚脚本 ---${NC}"

# 检查是否以 Root 用户运行
if [[ $EUID -ne 0 ]]; then
   log_error "此脚本必须以 root 用户运行。请使用 'sudo ./deploy_dns_monitor.sh'"
   exit 1
fi

PS3="请选择一个操作: "
options=("部署监控页面" "回滚/清理部署" "一键诊断并尝试修复" "退出")
select opt in "${options[@]}"
do
    case $opt in
        "部署监控页面")
            read -rp "您确定要部署监控页面吗？(y/N): " CONFIRM_DEPLOY
            if [[ "$CONFIRM_DEPLOY" =~ ^[yY]$ ]]; then
                deploy_monitor_result=0
                deploy_monitor || deploy_monitor_result=$?
                
                if [ "$deploy_monitor_result" -ne 0 ]; then
                    log_error "部署过程中发生错误。"
                    read -rp "是否尝试回滚已进行的部署操作？(y/N): " CONFIRM_ROLLBACK
                    if [[ "$CONFIRM_ROLLBACK" =~ ^[yY]$ ]]; then
                        cleanup_existing_deployment
                    else
                        log_info "已取消回滚操作。请手动检查并清理。"
                    fi
                fi
            else
                log_info "部署已取消。"
            fi
            break
            ;;
        "回滚/清理部署")
            read -rp "您确定要回滚/清理现有部署吗？这将删除所有相关文件和服务。(y/N): " CONFIRM_CLEAN
            if [[ "$CONFIRM_CLEAN" =~ ^[yY]$ ]]; then
                cleanup_existing_deployment
            else
                log_info "回滚/清理操作已取消。"
            fi
            break
            ;;
        "一键诊断并尝试修复")
            diagnose_and_fix
            break
            ;;
        "退出")
            log_info "脚本已退出。"
            exit 0
            ;;
        *) echo "无效的选项 $REPLY";;
    esac
done

echo -e "${BLUE}--- 脚本执行结束 ---${NC}"
